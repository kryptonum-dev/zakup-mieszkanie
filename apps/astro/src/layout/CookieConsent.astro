---
import Switch from '@components/ui/Switch.astro'
import Button from '@components/ui/Button'
import { getPageAnalyticsData } from '@utils/page-data'

const slug = Astro.params.slug || ''

const { analytics, additionalData } = await getPageAnalyticsData(slug)

const { gtmId, meta, tiktok } = analytics
const tiktokPixelId = tiktok?.pixelId || null
const metaPixelId = meta?.pixelId || null

const groups = [
  {
    id: 'necessary',
    name: 'Niezbędne',
    description: `Niezbędne pliki cookie pomagają uczynić naszą stronę użyteczną, umożliwiając działanie podstawowych funkcji, takich jak nawigacja po stronie internetowej czy dostęp do bezpiecznych obszarów strony. Bez tych plików cookie niektóre podstawowe funkcje strony nie będą działać prawidłowo.`,
  },
  {
    id: 'analytics',
    name: 'Analityczne',
    description: `Pliki cookie analityczne pomagają nam zrozumieć, w jaki sposób użytkownicy wchodzą w interakcje z naszą stroną internetową, zbierając i raportując informacje anonimowo. Te dane są wykorzystywane do doskonalenia struktury i treści strony.`,
  },
  {
    id: 'preferences',
    name: 'Preferencyjne',
    description: `Pliki cookie preferencyjne pozwalają stronie internetowej zapamiętywać informacje, które zmieniają sposób, w jaki strona się zachowuje lub wygląda, takie jak preferowany język lub region, w którym się znajdujesz.`,
  },
  {
    id: 'marketing',
    name: 'Marketingowe',
    description: `Pliki cookie marketingowe są używane do śledzenia odwiedzających na stronach internetowych. Ich celem jest wyświetlanie reklam, które są istotne i interesujące dla indywidualnych użytkowników, a tym samym bardziej wartościowe dla wydawców i zewnętrznych reklamodawców.`,
    subGroups: [
      {
        id: 'conversion_api',
        name: 'API Konwersji (Facebook)',
        description:
          'Pozwala na przesyłanie danych o konwersjach bezpośrednio do platform reklamowych w celu poprawy skuteczności reklam i lepszego mierzenia ich efektywności.',
      },
      {
        id: 'advanced_matching',
        name: 'Zaawansowane Dopasowanie (Facebook)',
        description:
          'Umożliwia lepsze dopasowanie użytkowników do ich działań na stronie, co pomaga w dokładniejszym targetowaniu reklam i analizie ich skuteczności.',
      },
    ],
  },
]
---

{
  analytics.gtmId && (
    <noscript>
      <iframe
        src={`https://www.googletagmanager.com/ns.html?id=${analytics.gtmId}`}
        height="0"
        width="0"
        style="display:none;visibility:hidden;"
      />
    </noscript>
  )
}
<aside class="cookie-consent" aria-hidden="true">
  <section class="content">
    <header class="header">
      <div data-header-initial>
        <h2 class="heading">Korzystając ze strony zgadzasz się na użycie ciasteczek</h2>
        <p>
          Korzystamy z cookie i podobnych technologii, by analizować ruch na stronie, dopasować ją do Ciebie i
          wyświetlać trafniejsze reklamy. <a href="/polityka-prywatnosci" class="link">Dowiedz się więcej</a>
        </p>
      </div>
      <div data-header-settings style="display: none">
        <h3 class="heading">Ustawienia cookies</h3>
        <p>
          Korzystając ze strony zgadzasz się na użycie tych ciasteczek. <a href="/polityka-prywatnosci" class="link">
            Dowiedz się więcej
          </a>
        </p>
      </div>
    </header>
    <div class="settings" style="display: none" data-lenis-prevent>
      {
        groups.map(({ id, name, description, subGroups }) => (
          <div class="group" data-group={id}>
            <label for={id} style={{ ...(id === 'necessary' && { cursor: 'not-allowed' }) }}>
              <Switch
                {...(id === 'necessary' && {
                  style: { cursor: 'not-allowed' },
                })}
                inputProps={{
                  id,
                  ...(id === 'necessary' && {
                    disabled: true,
                    checked: true,
                  }),
                }}
                class="switch"
              />
              <p>{name}</p>
              <p class="description">{description}</p>
            </label>
            {subGroups && (
              <div class="sub-groups">
                {subGroups.map((subGroup) => (
                  <label for={subGroup.id} class="sub-group">
                    <Switch
                      inputProps={{
                        id: subGroup.id,
                        'data-parent': id,
                      }}
                      class="switch"
                    />
                    <p>{subGroup.name}</p>
                    <p class="description">{subGroup.description}</p>
                  </label>
                ))}
              </div>
            )}
          </div>
        ))
      }
    </div>
    <div class="actions">
      <Button className="agree" theme="primary"> Zgoda na wszystkie </Button>
      <Button className="setPreferences" theme="secondary"> Ustaw preferencje </Button>
      <Button className="deny" theme="secondary"> Odmowa </Button>
    </div>
  </section>
</aside>

<style lang="scss">
  :global(html) {
    &:has(.cookie-consent[aria-hidden='false']) {
      overflow: hidden;
    }
  }
  $padding: clamp(1rem, calc(1.5vw / 0.48), 1.5rem);
  .cookie-consent {
    padding: $padding var(--page-margin);
    z-index: 11;
    position: fixed;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.34);
    backdrop-filter: blur(4px);
    display: grid;
    place-items: center;
    &[aria-hidden='true'] {
      display: none;
    }
  }
  .content {
    padding: $padding;
    max-height: calc(100vh - $padding * 2);
    max-height: calc(100dvh - $padding * 2);
    border: 1px solid var(--primary-200, #e6dbd1);
    background-color: var(--primary-100, #f2ede8);
    max-width: 48rem;
    display: flex;
    flex-direction: column;
    gap: clamp(1.5rem, calc(2rem / 0.48), 2rem);
    .heading {
      font-size: clamp(1.125rem, calc(1.5vw / 0.48), 1.75rem);
      margin-bottom: clamp(0.75rem, calc(1.25vw / 0.48), 1.25rem);
    }
    .settings {
      display: flex;
      flex-direction: column;
      gap: clamp(0.75rem, calc(1.25vw / 0.48), 1.25rem);
      overflow-y: auto;
      overscroll-behavior: contain;
      .sub-groups {
        display: flex;
        flex-direction: column;
        padding-left: 1.5rem;
        padding-top: 1.5rem;
        gap: clamp(0.75rem, calc(1.25vw / 0.48), 1.25rem);
        position: relative;
        border-left: 1px solid var(--primary-200, #e6dbd1);
      }
      label {
        display: grid;
        grid-template-columns: auto 1fr;
        gap: 0.25rem clamp(1rem, calc(1.5vw / 0.48), 1.5rem);
        .switch {
          position: sticky;
          top: 0;
          grid-row: 1 / span 2;
        }
        .description {
          font-size: 0.875rem;
        }
      }
    }
  }
  .actions {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.75rem;
    button:last-child {
      margin-left: auto;
    }
    @media (max-width: 43rem) {
      button {
        width: 100%;
        &:last-child {
          margin-top: 0.75rem;
        }
      }
    }
  }
</style>

<script is:inline define:vars={{ gtmId, tiktokPixelId, metaPixelId, additionalData }}>
  window.dataLayer = window.dataLayer || []
  function gtag() {
    window.dataLayer.push(arguments)
  }

  const timestamp = Math.floor(Date.now() / 1000)

  gtag('set', additionalData)

  function getCookie(name) {
    const cookies = document.cookie.split(';').map((cookie) => cookie.trim())
    const cookie = cookies.find((cookie) => cookie.startsWith(`${name}=`))
    return cookie ? decodeURIComponent(cookie.substring(name.length + 1)) : null
  }
  function setCookie(name, value, days = 1) {
    const date = new Date(Date.now() + 86400000 * days)
    const expires = days ? `; expires=${date.toUTCString()}` : ''
    document.cookie = `${name}=${encodeURIComponent(value)}${expires}; SameSite=Strict`
  }

  async function sendConversion(eventData, route = 'meta-conversion') {
    const cookieConsent = getCookie('cookie-consent')
    if (!cookieConsent) return

    const consentSettings = JSON.parse(decodeURIComponent(cookieConsent))
    if (consentSettings.conversion_api !== 'granted') return

    await fetch(`/api/${route}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(eventData),
    })
  }

  function trackEvent(eventName, customData = {}) {
    const event_id = crypto.randomUUID()
    const event_time = timestamp

    const commonData = {
      ...customData,
      event_id,
      event_time,
    }

    gtag('event', eventName, commonData)

    const conversionData = {
      eventName,
      eventSource: 'website',
      event_id,
      event_time,
      additionalCustomData: { customData, ...additionalData },
      slug: window.location.pathname,
    }

    if (metaPixelId) {
      sendConversion(conversionData, 'meta-conversion')
    }

    if (tiktokPixelId && eventName === 'ViewContent') {
      sendConversion(conversionData, 'tiktok-conversion')
    }
  }

  function fireInitialEvents() {
    trackEvent('PageView')
    trackEvent('ViewContent')
  }

  function setConsent(consent) {
    const consentMode = {
      functionality_storage: consent.necessary ? 'granted' : 'denied',
      security_storage: consent.necessary ? 'granted' : 'denied',
      ad_storage: consent.marketing ? 'granted' : 'denied',
      ad_user_data: consent.marketing ? 'granted' : 'denied',
      ad_personalization: consent.marketing ? 'granted' : 'denied',
      analytics_storage: consent.analytics ? 'granted' : 'denied',
      personalization_storage: consent.preferences ? 'granted' : 'denied',
      conversion_api: consent.conversion_api ? 'granted' : 'denied',
      advanced_matching: consent.advanced_matching ? 'granted' : 'denied',
    }
    gtag('consent', 'update', consentMode)
    setCookie('cookie-consent', JSON.stringify(consentMode), 90)

    const focusedElement = document.activeElement
    if (focusedElement && cookieConsentElement.contains(focusedElement)) {
      focusedElement.blur()
    }

    cookieConsentElement.style.display = 'none'
    cookieConsentElement.setAttribute('aria-hidden', 'true')

    fireInitialEvents()
  }

  const cookieConsentElement = document.querySelector('.cookie-consent')
  const acceptAllButton = cookieConsentElement.querySelector('.agree')
  const preferencesButton = cookieConsentElement.querySelector('.setPreferences')
  const denyButton = cookieConsentElement.querySelector('.deny')
  let isPreferencesOpen = false

  // Initialize GTM
  ;(function (w, d, s, l, i) {
    w[l] = w[l] || []
    w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' })
    var f = d.getElementsByTagName(s)[0],
      j = d.createElement(s),
      dl = l != 'dataLayer' ? '&l=' + l : ''
    j.async = true
    j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl
    f.parentNode.insertBefore(j, f)
  })(window, document, 'script', 'dataLayer', gtmId)

  if (getCookie('cookie-consent') === null) {
    gtag('consent', 'default', {
      functionality_storage: 'denied',
      security_storage: 'denied',
      ad_storage: 'denied',
      ad_user_data: 'denied',
      ad_personalization: 'denied',
      analytics_storage: 'denied',
      personalization_storage: 'denied',
      conversion_api: 'denied',
      advanced_matching: 'denied',
    })
    cookieConsentElement.setAttribute('aria-hidden', 'false')
  } else {
    gtag('consent', 'default', JSON.parse(getCookie('cookie-consent')))
    fireInitialEvents()
  }

  acceptAllButton.addEventListener('click', () => {
    setConsent({
      necessary: true,
      marketing: true,
      analytics: true,
      preferences: true,
      conversion_api: true,
      advanced_matching: true,
    })
  })

  preferencesButton.addEventListener('click', () => {
    if (!isPreferencesOpen) {
      cookieConsentElement.querySelector('.header [data-header-initial]').style.display = 'none'
      cookieConsentElement.querySelector('.header [data-header-settings]').style.removeProperty('display')
      cookieConsentElement.querySelector('.settings').style.removeProperty('display')
      isPreferencesOpen = true
    } else {
      setConsent({
        necessary: cookieConsentElement.querySelector('input[id="necessary"]').checked,
        marketing: cookieConsentElement.querySelector('input[id="marketing"]').checked,
        analytics: cookieConsentElement.querySelector('input[id="analytics"]').checked,
        preferences: cookieConsentElement.querySelector('input[id="preferences"]').checked,
        conversion_api: cookieConsentElement.querySelector('input[id="conversion_api"]').checked,
        advanced_matching: cookieConsentElement.querySelector('input[id="advanced_matching"]').checked,
      })
    }
  })

  denyButton.addEventListener('click', () => {
    setConsent({
      necessary: false,
      marketing: false,
      analytics: false,
      preferences: false,
      conversion_api: false,
      advanced_matching: false,
    })
  })

  const marketingSwitch = cookieConsentElement.querySelector('input[id="marketing"]')
  const subSwitches = cookieConsentElement.querySelectorAll('.sub-groups input[type="checkbox"]')

  let isMarketingSwitchTriggered = false

  marketingSwitch.addEventListener('change', (e) => {
    isMarketingSwitchTriggered = true
    subSwitches.forEach((subSwitch) => {
      subSwitch.checked = e.target.checked
    })
    isMarketingSwitchTriggered = false
  })

  subSwitches.forEach((subSwitch) => {
    subSwitch.addEventListener('change', (e) => {
      if (!isMarketingSwitchTriggered && e.target.checked) {
        marketingSwitch.checked = true
      }
    })
  })
</script>
