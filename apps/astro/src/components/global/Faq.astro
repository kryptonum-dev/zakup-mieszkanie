---
import PortableText, { PortableTextQuery, type PortableTextValue } from '@components/ui/portable-text'
import Button, { ButtonDataQuery, type ButtonDataProps } from '@components/ui/Button'
import Accordion from '@components/ui/Accordion.astro'
import { toHTML } from '@utils/to-html'

type Props = {
  index: number
  sectionId?: string
  heading: PortableTextValue
  paragraph: PortableTextValue
  cta: ButtonDataProps
  faqItems: {
    question: PortableTextValue
    answer: PortableTextValue
  }[]
}

export const Faq_Query = `
  _type == "Faq" => {
    ${PortableTextQuery('heading')}
    ${PortableTextQuery('paragraph')}
    ${ButtonDataQuery('cta')}
    faqItems[] {
      question,
      ${PortableTextQuery('answer')}
    }
  },
`

const { index, sectionId, heading, paragraph, cta, faqItems } = Astro.props

const slug = Astro.params.slug || ''
const schemaId = `${slug}#faq`

const schemaItems = await Promise.all(
  faqItems.map(async ({ question, answer }) => ({
    question: await toHTML(question),
    answer: await toHTML(answer),
  }))
)
---

<section class="Faq" id={sectionId}>
  <header>
    <PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} />
    <PortableText value={paragraph} class="paragraph" />
    <Button {...cta} />
  </header>
  <div class="faq-items">
    {
      faqItems.map(({ question, answer }, i) => (
        <Accordion summary={question} class="accordion" open={i === 0}>
          <PortableText value={answer} />
        </Accordion>
      ))
    }
  </div>
</section>

<style lang="scss">
  .Faq {
    padding: clamp(4rem, calc(5vw / 0.48), 7rem) 0;
    display: grid;
    grid-template-columns: 0.5fr 1fr;
    gap: clamp(2rem, calc(3vw / 0.48), 5rem);
    header {
      .paragraph {
        margin: clamp(1rem, calc(1vw / 0.48), 1.25rem) 0 clamp(1.5rem, calc(2vw / 0.48), 2rem);
      }
    }
    @media (max-width: 65rem) {
      max-width: 48rem;
      grid-template-columns: 1fr;
    }
  }
</style>

<script
  is:inline
  type="application/ld+json"
  set:html={JSON.stringify({
    '@context': 'https://schema.org',
    '@type': 'FAQPage',
    '@id': schemaId,
    mainEntity: schemaItems.map(({ question, answer }) => ({
      '@type': 'Question',
      name: question,
      acceptedAnswer: {
        '@type': 'Answer',
        text: answer,
      },
    })),
  })}
/>
