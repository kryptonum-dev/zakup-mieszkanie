---
import type { ComponentProps } from 'astro/types'
import HeroSection, { HeroSection_Query } from '@components/global/HeroSection.astro'
import Features, { Features_Query } from '@components/global/Features.astro'
import Process, { Process_Query } from '@components/global/Process.astro'
import ContactImage, { ContactImage_Query } from '@components/global/ContactImage.astro'
import Faq, { Faq_Query } from '@components/global/Faq.astro'
import ContactForm, { ContactForm_Query } from '@components/global/ContactForm/ContactForm.astro'
import SimpleColumn, { SimpleColumn_Query } from '@components/global/SimpleColumn.astro'

const components = {
  HeroSection,
  SimpleColumn,
  Features,
  Process,
  ContactImage,
  Faq,
  ContactForm,
}

type ComponentsMap = {
  [Component in keyof typeof components]: {
    _type: Component
  } & ComponentProps<(typeof components)[Component]>
}

export type ComponentsProps = Array<ComponentsMap[keyof typeof components]>

type Props = {
  data: ComponentsProps
  indexStart?: number
}

const { data, indexStart = 0 } = Astro.props

export const Components_Query = /* groq */ `
  components[] {
    _type,
    sectionId,
    ${HeroSection_Query}
    ${SimpleColumn_Query}
    ${Features_Query}
    ${Process_Query}
    ${ContactImage_Query}
    ${Faq_Query}
    ${ContactForm_Query}
  }
`
---

{
  data?.map((item, i) => {
    // NOTE: Using 'as any' is not ideal for type safety, but it's used here to simplify
    // the implementation and avoid creating separate typed interfaces for each component.
    const DynamicComponent = components[item._type] as any
    if (!DynamicComponent) return null
    return <DynamicComponent {...item} index={indexStart + i} />
  })
}
